{
 "cells": [
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# You survey households in your area to find the average rent they are paying. Find the standard deviation from the following data: \n",
    " \n",
    "$1550, $1700, $900, $850, $1000, $950. \n",
    " \n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Average of the rent is :  1158.3333333333333\n",
      "The SD is 335.93\n"
     ]
    }
   ],
   "source": [
    "import numpy as np\n",
    "def average(a):\n",
    "    return sum(a)/len(a)\n",
    "a=[1550, 1700, 900,850, 1000, 950]\n",
    "print(\"Average of the rent is : \", average(a))\n",
    "variance=np.var(a)\n",
    "std=np.std(a)\n",
    "print(\"The SD is {:.2f}\".format(std))"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# Find the variance for the following set of data representing trees in California (heights in feet): \n",
    " \n",
    "3, 21, 98, 203, 17, 9 "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "5183.25"
      ]
     },
     "execution_count": 26,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import statistics\n",
    "a=[3,21,98,203,17,9]\n",
    "vari=np.var(a)\n",
    "vari"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "6219.9**.5"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3. In a class of 100 students, 80 students passed in all subjects, 10 failed in one subject, 7 failed in two subjects and 3 failed in three subjects. Find the probability distribution of the variable for number of subjects a student from the given class has failed in. \n",
    " \n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "\t\n",
      "Probability of getting failed in 0 subject is 0.8\n",
      "\t\n",
      "Probability of getting failed in 1 subject is 0.1\n",
      "\t\n",
      "Probability of getting failed in 2 subject is 0.07\n",
      "\t\n",
      "Probability of getting failed in 3 subject is 0.03\n"
     ]
    }
   ],
   "source": [
    "x=[80,10,7,3]\n",
    "y=[0,1,2,3]\n",
    "def prob(x):\n",
    "    return x[j]/100\n",
    "for i in range(0,1):\n",
    "    for j in range(0,len(x)):\n",
    "                print('\\t')\n",
    "                print(\"Probability of getting failed in\", y[j],\"subject is\", prob(x))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "#  2.2. Problem Statement: STATISTICS 2 \n",
    " \n",
    " \n",
    "1. A test is conducted which is consisting of 20 MCQs (multiple choices questions) with every MCQ having its four options out of which only one is correct. Determine the probability that a person undertaking that test has answered exactly 5 questions wrong. \n",
    " \n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "n_fact 2432902008176640000\n",
      "pass_fact 1307674368000\n",
      "fail_fact: 120\n",
      "Probability of exactly 5 question wrong is :  3.4264958230778575e-06\n"
     ]
    }
   ],
   "source": [
    "from functools import reduce\n",
    "n=20\n",
    "s=5\n",
    "k=15\n",
    "\n",
    "p=1/4\n",
    "q=1-p\n",
    "\n",
    "array=[i for i in range(1,21)]\n",
    "n_fact= reduce(lambda x,y : x*y,array)\n",
    "print(\"n_fact\",n_fact)\n",
    "\n",
    "pass_factorial=reduce(lambda x,y : x*y, array[0:15])\n",
    "print(\"pass_fact\", pass_factorial)\n",
    "fail_factorial=reduce(lambda x,y: x*y, array[0:5])\n",
    "print(\"fail_fact:\", fail_factorial)\n",
    "probab=(n_fact/(pass_factorial*fail_factorial))*p**k*q**s\n",
    "print(\"Probability of exactly 5 question wrong is : \",probab)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# A die marked A to E is rolled 50 times. Find the probability of getting a “D” exactly 5 times. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Probability of 'D' coming exactly 5 times:  0.029531204310523224\n"
     ]
    }
   ],
   "source": [
    "from scipy import stats\n",
    "import scipy\n",
    "n=50\n",
    "p=1/5\n",
    "\n",
    "probab=stats.binom.pmf(5,n,p)\n",
    "print(\"Probability of 'D' coming exactly 5 times: \",probab)"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 3. Two balls are drawn at random in succession without replacement from an urn containing 4 red balls and 6 black balls. Find the probabilities of all the possible outcomes. "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "The probabilities of all possible outcomes of picking Red ball first,Black Ball second is(0.40,0.67)\n",
      "The probabilities of all possible outcomes of picking Black ball first,Red Ball second is(0.60,0.44)\n",
      "The probabilities of all possible outcomes of picking both the balls as Black is 0.0000000002\n",
      "The probabilities of all possible outcomes of picking both the balls as Red is is(0.0000000001\n"
     ]
    }
   ],
   "source": [
    "from scipy.special import factorial\n",
    "red_ball=4\n",
    "black_ball=6\n",
    "total_balls=red_ball + black_ball\n",
    "p_first_red_ball=red_ball/total_balls\n",
    "p_second_black_ball=black_ball/(total_balls-1)\n",
    "p_first_black_ball=black_ball/total_balls\n",
    "p_second_red_ball=red_ball/(total_balls-1)\n",
    "P_2_r=(factorial(red_ball)/(factorial(2)*factorial(red_ball-2)))/(factorial(total_balls)/factorial(2)*factorial(total_balls-2))\n",
    "P_2_b=(factorial(black_ball)/(factorial(2)*factorial(black_ball-2)))/(factorial(total_balls)/factorial(2)*factorial(total_balls-2))\n",
    "print(\"The probabilities of all possible outcomes of picking Red ball first,Black Ball second is({:0.2f},{:0.2f})\".format(p_first_red_ball,p_second_black_ball))\n",
    "print(\"The probabilities of all possible outcomes of picking Black ball first,Red Ball second is({:0.2f},{:0.2f})\".format(p_first_black_ball,p_second_red_ball))\n",
    "print(\"The probabilities of all possible outcomes of picking both the balls as Black is {:0.10f}\".format(P_2_b))\n",
    "print(\"The probabilities of all possible outcomes of picking both the balls as Red is is({:0.10f}\".format(P_2_r))\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2.3. Problem Statement: STATISTICS 3 \n",
    "Blood glucose levels for obese patients have a mean of 100 with a standard deviation of  15. A researcher thinks that a diet high in raw cornstarch will have a positive effect on blood glucose levels. A sample of 36 patients who have tried the raw cornstarch diet have a mean glucose level of 108. Test the hypothesis that the raw cornstarch had an effect or not. \n",
    " \n",
    " "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "z_statistics is : 3.2\n",
      "looking this value in Z-table, value of 0.9993, which implies that the probabilityis having value less than 99.93%,\n",
      "it is also that the value is less than 0.05, hence,it is significant and null hypothesis is rejected \n",
      "There is cornstarch effect in research.\n"
     ]
    }
   ],
   "source": [
    "import math\n",
    "mean_glucose=108\n",
    "mu0=100\n",
    "s=15\n",
    "n=36\n",
    "alpha=0.05\n",
    "z_test=(108-100)/(15/math.sqrt(36))\n",
    "print(\"z_statistics is :\", z_test)\n",
    "print(\"looking this value in Z-table, value of 0.9993, which implies that the probabilityis having value less than 99.93%,\\nit is also that the value is less than 0.05, hence,it is significant and null hypothesis is rejected \\nThere is cornstarch effect in research.\")\n"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 1. In one state, 52% of the voters are Republicans, and 48% are Democrats. In a second state, 47% of the voters are Republicans, and 53% are Democrats. Suppose a simple random sample of 100 voters are surveyed from each state.What is the probability that the survey will show a greater percentage of Republican voters in the second state than in the first state?  \n",
    " \n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Mu: 0.050000000000000044 Std:  0.07061869440877536\n",
      "Z_score(P_1,P_2):  -0.7080278164104213\n",
      "Survey in the research shows that there is greater probability of Republican \n"
     ]
    }
   ],
   "source": [
    "N1=100\n",
    "N2=100\n",
    "p1=.52\n",
    "q1=.48\n",
    "p2=.47\n",
    "q2=.53\n",
    "mu=p1-p2\n",
    "s=math.sqrt(((p1*q1/N1)+(p2*q2/N2)))\n",
    "print(\"Mu:\", mu, \"Std: \",s)\n",
    "x=0\n",
    "Z=(x-mu)/s\n",
    "print(\"Z_score(P_1,P_2): \", Z)\n",
    "\n",
    "print(\"Survey in the research shows that there is greater probability of Republican \")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2. You take the SAT and score 1100. The mean score for the SAT is 1026 and the standard deviation is 209. How well did you score on the test compared to the average test taker? "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "z_score:  0.35406698564593303\n",
      "z_score is greater than mean\n"
     ]
    }
   ],
   "source": [
    "score=1100\n",
    "sd=209\n",
    "mu=1026\n",
    "z=(score-mu)/sd\n",
    "print(\"z_score: \", z)\n",
    "print(\"z_score is greater than mean\")"
   ]
  },
  {
   "cell_type": "markdown",
   "metadata": {},
   "source": [
    "# 2.4. Problem Statement: STATISTICS 4  \n",
    " \n",
    "1. Is gender independent of education level? A random sample of 395 people were surveyed and each person was asked to report the highest education level they obtained. The data that resulted from the survey is summarized in the following table: \n",
    "             High-School   Bachelor  Masters   Ph.D.   Total \n",
    " Female         60          54        46       41      201      \n",
    " Male           40          44        53       57      194 \n",
    "Total          100          98        99       98      395 \n",
    " \n",
    "Question: Are gender and education level dependent at 5% level of significance? In other words, given the data collected above, is there a relationship between the gender of an individual and the level of education that they have obtained?"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "[40, 44, 53, 57, 60, 54, 46, 41]\n",
      "     Education  Marks Sex\n",
      "0  High_school     40   M\n",
      "1    Bachelors     44   M\n",
      "2      Masters     53   M\n",
      "3         Ph.d     57   M\n",
      "4  High_school     60   F\n",
      "5    Bachelors     54   F\n",
      "6      Masters     46   F\n",
      "7         Ph.d     41   F\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Education</th>\n",
       "      <th>Bachelors</th>\n",
       "      <th>High_school</th>\n",
       "      <th>Masters</th>\n",
       "      <th>Ph.d</th>\n",
       "      <th>All</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <th>Marks</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">F</th>\n",
       "      <th>41</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>46</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>54</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>60</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th rowspan=\"4\" valign=\"top\">M</th>\n",
       "      <th>40</th>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>44</th>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>53</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>57</th>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>0</td>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>All</th>\n",
       "      <th></th>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>2</td>\n",
       "      <td>8</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Education  Bachelors  High_school  Masters  Ph.d  All\n",
       "Sex Marks                                            \n",
       "F   41             0            0        0     1    1\n",
       "    46             0            0        1     0    1\n",
       "    54             1            0        0     0    1\n",
       "    60             0            1        0     0    1\n",
       "M   40             0            1        0     0    1\n",
       "    44             1            0        0     0    1\n",
       "    53             0            0        1     0    1\n",
       "    57             0            0        0     1    1\n",
       "All                2            2        2     2    8"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "import numpy as np\n",
    "import pandas as pd\n",
    "import scipy.stats as stats\n",
    "\n",
    "female=[60,54,46,41]\n",
    "male=[40,44,53,57]\n",
    "High_school=[60,40]\n",
    "Bachelors=[54,44]\n",
    "Masters=[46,53]\n",
    "Phd=[41,57]\n",
    "marks=male+female\n",
    "\n",
    "print(marks)\n",
    "sex=['M','M','M','M','F','F','F','F']\n",
    "education=[\"High_school\",\"Bachelors\",\"Masters\",\"Ph.d\",\"High_school\",\"Bachelors\",\"Masters\",\"Ph.d\"]\n",
    "df=pd.DataFrame({\"Education\":education,\"Marks\":marks,\"Sex\":sex})\n",
    "print(Df)\n",
    "cross_tab=pd.crosstab([df.Sex,df.Marks],df.Education,margins=True)\n",
    "cross_tab"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th>Education</th>\n",
       "      <th>Bachelors</th>\n",
       "      <th>High_school</th>\n",
       "      <th>Masters</th>\n",
       "      <th>Ph.d</th>\n",
       "      <th>All</th>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Sex</th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "      <th></th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>F</th>\n",
       "      <td>54</td>\n",
       "      <td>60</td>\n",
       "      <td>46</td>\n",
       "      <td>41</td>\n",
       "      <td>201</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>M</th>\n",
       "      <td>44</td>\n",
       "      <td>40</td>\n",
       "      <td>53</td>\n",
       "      <td>57</td>\n",
       "      <td>194</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>All</th>\n",
       "      <td>98</td>\n",
       "      <td>100</td>\n",
       "      <td>99</td>\n",
       "      <td>98</td>\n",
       "      <td>395</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "Education  Bachelors  High_school  Masters  Ph.d  All\n",
       "Sex                                                  \n",
       "F                 54           60       46    41  201\n",
       "M                 44           40       53    57  194\n",
       "All               98          100       99    98  395"
      ]
     },
     "execution_count": 30,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1=pd.crosstab(Df.Sex, Df.Education,Df.Marks, aggfunc=\"sum\",margins=True)\n",
    "df1"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Bachelors</th>\n",
       "      <th>High_school</th>\n",
       "      <th>Masters</th>\n",
       "      <th>Ph.d</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Female</th>\n",
       "      <td>54</td>\n",
       "      <td>60</td>\n",
       "      <td>46</td>\n",
       "      <td>41</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Male</th>\n",
       "      <td>44</td>\n",
       "      <td>40</td>\n",
       "      <td>53</td>\n",
       "      <td>57</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Bachelors  High_school  Masters  Ph.d\n",
       "Female         54           60       46    41\n",
       "Male           44           40       53    57"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df1.columns=[\"Bachelors\",\"High_school\",\"Masters\",\"Ph.d\",\"Genderwise_total\"]\n",
    "df1.index=[\"Female\",\"Male\",\"Combined\"]\n",
    "df1\n",
    "\n",
    "df2=df1.iloc[0:2,0:4]\n",
    "df2"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>Bachelors</th>\n",
       "      <th>High_School</th>\n",
       "      <th>Masters</th>\n",
       "      <th>Ph.d</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>Female</th>\n",
       "      <td>49.868354</td>\n",
       "      <td>50.886076</td>\n",
       "      <td>50.377215</td>\n",
       "      <td>49.868354</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>Male</th>\n",
       "      <td>48.131646</td>\n",
       "      <td>49.113924</td>\n",
       "      <td>48.622785</td>\n",
       "      <td>48.131646</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "        Bachelors  High_School    Masters       Ph.d\n",
       "Female  49.868354    50.886076  50.377215  49.868354\n",
       "Male    48.131646    49.113924  48.622785  48.131646"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df3=np.outer(df1[\"Genderwise_total\"][0:2],df1.loc[\"Combined\"][0:4])/395.0\n",
    "df3=pd.DataFrame(df3)\n",
    "df3.columns=[\"Bachelors\",\"High_School\",\"Masters\",\"Ph.d\"]\n",
    "df3.index=[\"Female\",\"Male\"]\n",
    "df3"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4.682478001917256\n"
     ]
    }
   ],
   "source": [
    "chi_squared_stat=(((df3-df2)**2)/df3).sum().sum()\n",
    "print(chi_squared_stat)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 43,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Critical value\n",
      "7.814727903251179\n"
     ]
    }
   ],
   "source": [
    "cvalue=stats.chi2.ppf(q=0.95,df=3)\n",
    "print(\"Critical value\")\n",
    "print(cvalue)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 45,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "P value\n",
      "0.19657984145597762\n"
     ]
    }
   ],
   "source": [
    "p_value=1-stats.chi2.cdf(x=chi_squared_stat,df=3)\n",
    "print(\"P value\")\n",
    "print(p_value)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 47,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(8.006066246262538, 0.045886500891747214, 3, array([[49.86835443, 50.88607595, 50.37721519, 49.86835443],\n",
      "       [48.13164557, 49.11392405, 48.62278481, 48.13164557]]))\n",
      "*******************************************************************************************************************\n",
      "The outpout shows the chi-square statistics= 8, the p-value as 0.045 and the degrees of freedom as 3\n",
      "The critical value with 3 degree of freedom is 7.815. Since 8.006>7.815, therefore we reject the null hypothesis and conclude that the education level depends on gender at a 5% level of significance.\n"
     ]
    }
   ],
   "source": [
    "result=stats.chi2_contingency(observed=df2)\n",
    "print(result)\n",
    "print('*'*115)\n",
    "print(\"The outpout shows the chi-square statistics= 8, the p-value as 0.045 and the degrees of freedom as 3\")\n",
    "print(\"The critical value with 3 degree of freedom is 7.815. Since 8.006>7.815, therefore we reject the null hypothesis and conclude that the education level depends on gender at a 5% level of significance.\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.3"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
